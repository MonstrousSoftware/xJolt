/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt;

import gen.jolt.physics.collision.ShapeFilter;
import gen.jolt.physics.collision.shape.Shape;
import gen.jolt.physics.collision.shape.SubShapeID;

public class ShapeFilterCallback extends ShapeFilter {

    static private Shape Shape_TEMP_STATIC_GEN_0;

    static private SubShapeID SubShapeID_TEMP_STATIC_GEN_0;

    static private Shape Shape_TEMP_STATIC_GEN_1;

    static private SubShapeID SubShapeID_TEMP_STATIC_GEN_1;

    static private Shape Shape_TEMP_STATIC_GEN_2;

    static private SubShapeID SubShapeID_TEMP_STATIC_GEN_2;

    static public final ShapeFilterCallback NULL = ShapeFilterCallback.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected ShapeFilterCallback(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static ShapeFilterCallback native_new() {
        return new ShapeFilterCallback((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.ShapeFilterCallbackImpl);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.ShapeFilterCallbackImpl);jolt.destroy(jsObj);")
    public static native void internal_native_deleteNative(int this_addr);

    public ShapeFilterCallback() {
        super((byte) 1, (char) 1);
        int addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        ShouldCollide_Any ShouldCollide_Any = new ShouldCollide_Any() {

            public boolean ShouldCollide_Any(int inShape2_addr, int inSubShapeIDOfShape2_addr) {
                return internal_ShouldCollide_Any(inShape2_addr, inSubShapeIDOfShape2_addr);
            }
        };
        ShouldCollide_Shape ShouldCollide_Shape = new ShouldCollide_Shape() {

            public boolean ShouldCollide_Shape(int inShape1_addr, int inSubShapeIDOfShape1_addr, int inShape2_addr, int inSubShapeIDOfShape2_addr) {
                return internal_ShouldCollide_Shape(inShape1_addr, inSubShapeIDOfShape1_addr, inShape2_addr, inSubShapeIDOfShape2_addr);
            }
        };
        internal_native_setupCallback(native_address, ShouldCollide_Any, ShouldCollide_Shape);
    }

    protected boolean ShouldCollide_Any(Shape inShape2, SubShapeID inSubShapeIDOfShape2) {
        return false;
    }

    private boolean internal_ShouldCollide_Any(int inShape2_addr, int inSubShapeIDOfShape2_addr) {
        if (Shape_TEMP_STATIC_GEN_0 == null)
            Shape_TEMP_STATIC_GEN_0 = Shape.native_new();
        Shape_TEMP_STATIC_GEN_0.internal_reset(inShape2_addr, false);
        if (SubShapeID_TEMP_STATIC_GEN_0 == null)
            SubShapeID_TEMP_STATIC_GEN_0 = SubShapeID.native_new();
        SubShapeID_TEMP_STATIC_GEN_0.internal_reset(inSubShapeIDOfShape2_addr, false);
        return ShouldCollide_Any(Shape_TEMP_STATIC_GEN_0, SubShapeID_TEMP_STATIC_GEN_0);
    }

    protected boolean ShouldCollide_Shape(Shape inShape1, SubShapeID inSubShapeIDOfShape1, Shape inShape2, SubShapeID inSubShapeIDOfShape2) {
        return false;
    }

    private boolean internal_ShouldCollide_Shape(int inShape1_addr, int inSubShapeIDOfShape1_addr, int inShape2_addr, int inSubShapeIDOfShape2_addr) {
        if (Shape_TEMP_STATIC_GEN_1 == null)
            Shape_TEMP_STATIC_GEN_1 = Shape.native_new();
        Shape_TEMP_STATIC_GEN_1.internal_reset(inShape1_addr, false);
        if (SubShapeID_TEMP_STATIC_GEN_1 == null)
            SubShapeID_TEMP_STATIC_GEN_1 = SubShapeID.native_new();
        SubShapeID_TEMP_STATIC_GEN_1.internal_reset(inSubShapeIDOfShape1_addr, false);
        if (Shape_TEMP_STATIC_GEN_2 == null)
            Shape_TEMP_STATIC_GEN_2 = Shape.native_new();
        Shape_TEMP_STATIC_GEN_2.internal_reset(inShape2_addr, false);
        if (SubShapeID_TEMP_STATIC_GEN_2 == null)
            SubShapeID_TEMP_STATIC_GEN_2 = SubShapeID.native_new();
        SubShapeID_TEMP_STATIC_GEN_2.internal_reset(inSubShapeIDOfShape2_addr, false);
        return ShouldCollide_Shape(Shape_TEMP_STATIC_GEN_1, SubShapeID_TEMP_STATIC_GEN_1, Shape_TEMP_STATIC_GEN_2, SubShapeID_TEMP_STATIC_GEN_2);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.ShapeFilterCallbackImpl();
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jolt.ShapeFilterCallbackImpl();return jolt.getPointer(jsObj);")
    public static native int internal_native_create();

    @org.teavm.jso.JSBody(params = { "this_addr", "ShouldCollide_Any", "ShouldCollide_Shape" }, script = "var ShapeFilterCallbackImpl = jolt.wrapPointer(this_addr, jolt.ShapeFilterCallbackImpl); ShapeFilterCallbackImpl.ShouldCollide_Any = ShouldCollide_Any; ShapeFilterCallbackImpl.ShouldCollide_Shape = ShouldCollide_Shape;")
    public static native void internal_native_setupCallback(int this_addr, ShouldCollide_Any ShouldCollide_Any, ShouldCollide_Shape ShouldCollide_Shape);

    @org.teavm.jso.JSFunctor()
    public interface ShouldCollide_Any extends org.teavm.jso.JSObject {

        boolean ShouldCollide_Any(int inShape2_addr, int inSubShapeIDOfShape2_addr);
    }

    @org.teavm.jso.JSFunctor()
    public interface ShouldCollide_Shape extends org.teavm.jso.JSObject {

        boolean ShouldCollide_Shape(int inShape1_addr, int inSubShapeIDOfShape1_addr, int inShape2_addr, int inSubShapeIDOfShape2_addr);
    }
}
