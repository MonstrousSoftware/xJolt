/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.collision;

import gen.jolt.physics.softbody.CollideShapeCollector;

public class CollideShapeClosestHitCollisionCollector extends CollideShapeCollector {

    private CollideShapeResult CollideShapeResult_TEMP_GEN_0;

    static public final CollideShapeClosestHitCollisionCollector NULL = CollideShapeClosestHitCollisionCollector.native_new();

    public CollideShapeClosestHitCollisionCollector() {
        super((byte) 1, (char) 1);
        int addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.CollideShapeClosestHitCollisionCollector();
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jolt.CollideShapeClosestHitCollisionCollector();return jolt.getPointer(jsObj);")
    public static native int internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected CollideShapeClosestHitCollisionCollector(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static CollideShapeClosestHitCollisionCollector native_new() {
        return new CollideShapeClosestHitCollisionCollector((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollideShapeClosestHitCollisionCollector);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollideShapeClosestHitCollisionCollector);jolt.destroy(jsObj);")
    public static native void internal_native_deleteNative(int this_addr);

    public boolean HadHit() {
        return internal_native_HadHit(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollideShapeClosestHitCollisionCollector);
var returnedJSObj = jsObj.HadHit();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollideShapeClosestHitCollisionCollector);var returnedJSObj = jsObj.HadHit();return returnedJSObj;")
    public static native boolean internal_native_HadHit(int this_addr);

    public CollideShapeResult get_mHit() {
        int pointer = internal_native_get_mHit(native_address);
        if (pointer == 0)
            return CollideShapeResult.NULL;
        if (CollideShapeResult_TEMP_GEN_0 == null)
            CollideShapeResult_TEMP_GEN_0 = CollideShapeResult.native_new();
        CollideShapeResult_TEMP_GEN_0.internal_reset(pointer, false);
        return CollideShapeResult_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollideShapeClosestHitCollisionCollector);
var returnedJSObj = jsObj.get_mHit();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollideShapeClosestHitCollisionCollector);var returnedJSObj = jsObj.get_mHit();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    public static native int internal_native_get_mHit(int this_addr);

    public void set_mHit(CollideShapeResult mHit) {
        internal_native_set_mHit(native_address, mHit.native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollideShapeClosestHitCollisionCollector);
jsObj.set_mHit(mHit_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mHit_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollideShapeClosestHitCollisionCollector);jsObj.set_mHit(mHit_addr);")
    public static native void internal_native_set_mHit(int this_addr, int mHit_addr);
}
