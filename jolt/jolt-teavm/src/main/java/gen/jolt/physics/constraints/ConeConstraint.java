/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.constraints;

import gen.jolt.math.Vec3;

public class ConeConstraint extends TwoBodyConstraint {

    private Vec3 Vec3_TEMP_GEN_0;

    static public final ConeConstraint NULL = ConeConstraint.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected ConeConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static ConeConstraint native_new() {
        return new ConeConstraint((byte) 0, (char) 0);
    }

    public void SetHalfConeAngle(float inHalfConeAngle) {
        internal_native_SetHalfConeAngle(native_address, inHalfConeAngle);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.ConeConstraint);
jsObj.SetHalfConeAngle(inHalfConeAngle);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inHalfConeAngle"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.ConeConstraint);jsObj.SetHalfConeAngle(inHalfConeAngle);")
    public static native void internal_native_SetHalfConeAngle(int this_addr, float inHalfConeAngle);

    public float GetCosHalfConeAngle() {
        return internal_native_GetCosHalfConeAngle(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.ConeConstraint);
var returnedJSObj = jsObj.GetCosHalfConeAngle();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.ConeConstraint);var returnedJSObj = jsObj.GetCosHalfConeAngle();return returnedJSObj;")
    public static native float internal_native_GetCosHalfConeAngle(int this_addr);

    public Vec3 GetTotalLambdaPosition() {
        int pointer = internal_native_GetTotalLambdaPosition(native_address);
        if (pointer == 0)
            return Vec3.NULL;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = Vec3.native_new();
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.ConeConstraint);
var returnedJSObj = jsObj.GetTotalLambdaPosition();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.ConeConstraint);var returnedJSObj = jsObj.GetTotalLambdaPosition();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    public static native int internal_native_GetTotalLambdaPosition(int this_addr);

    public float GetTotalLambdaRotation() {
        return internal_native_GetTotalLambdaRotation(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.ConeConstraint);
var returnedJSObj = jsObj.GetTotalLambdaRotation();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.ConeConstraint);var returnedJSObj = jsObj.GetTotalLambdaRotation();return returnedJSObj;")
    public static native float internal_native_GetTotalLambdaRotation(int this_addr);
}
