/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.core;

import jolt.idl.IDLBase;

public class LinearCurve extends IDLBase {

    static public final LinearCurve NULL = LinearCurve.native_new();

    public LinearCurve() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new LinearCurve();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected LinearCurve(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static LinearCurve native_new() {
        return new LinearCurve((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
LinearCurve* nativeObject = (LinearCurve*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void Clear() {
        internal_native_Clear(native_address);
    }

    /*[-JNI;-NATIVE]
LinearCurve* nativeObject = (LinearCurve*)this_addr;
nativeObject->Clear();
*/
    public static native void internal_native_Clear(long this_addr);

    public void Reserve(int inSize) {
        internal_native_Reserve(native_address, inSize);
    }

    /*[-JNI;-NATIVE]
LinearCurve* nativeObject = (LinearCurve*)this_addr;
nativeObject->Reserve(inSize);
*/
    public static native void internal_native_Reserve(long this_addr, int inSize);

    public void AddPoint(float inX, float inY) {
        internal_native_AddPoint(native_address, inX, inY);
    }

    /*[-JNI;-NATIVE]
LinearCurve* nativeObject = (LinearCurve*)this_addr;
nativeObject->AddPoint((float)inX, (float)inY);
*/
    public static native void internal_native_AddPoint(long this_addr, float inX, float inY);

    public void Sort() {
        internal_native_Sort(native_address);
    }

    /*[-JNI;-NATIVE]
LinearCurve* nativeObject = (LinearCurve*)this_addr;
nativeObject->Sort();
*/
    public static native void internal_native_Sort(long this_addr);

    public float GetMinX() {
        return internal_native_GetMinX(native_address);
    }

    /*[-JNI;-NATIVE]
LinearCurve* nativeObject = (LinearCurve*)this_addr;
return nativeObject->GetMinX();
*/
    public static native float internal_native_GetMinX(long this_addr);

    public float GetMaxX() {
        return internal_native_GetMaxX(native_address);
    }

    /*[-JNI;-NATIVE]
LinearCurve* nativeObject = (LinearCurve*)this_addr;
return nativeObject->GetMaxX();
*/
    public static native float internal_native_GetMaxX(long this_addr);

    public float GetValue(float inX) {
        return internal_native_GetValue(native_address, inX);
    }

    /*[-JNI;-NATIVE]
LinearCurve* nativeObject = (LinearCurve*)this_addr;
return nativeObject->GetValue((float)inX);
*/
    public static native float internal_native_GetValue(long this_addr, float inX);
}
