/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.physics.collision.ShapeFilter;
import jolt.physics.collision.shape.Shape;
import jolt.physics.collision.shape.SubShapeID;

public class ShapeFilterCallback extends ShapeFilter {

    static private Shape Shape_TEMP_STATIC_GEN_0;

    static private SubShapeID SubShapeID_TEMP_STATIC_GEN_0;

    static private Shape Shape_TEMP_STATIC_GEN_1;

    static private SubShapeID SubShapeID_TEMP_STATIC_GEN_1;

    static private Shape Shape_TEMP_STATIC_GEN_2;

    static private SubShapeID SubShapeID_TEMP_STATIC_GEN_2;

    static public final ShapeFilterCallback NULL = ShapeFilterCallback.native_new();

    static public final ShapeFilterCallback T_01 = ShapeFilterCallback.native_new();

    static public final ShapeFilterCallback T_02 = ShapeFilterCallback.native_new();

    static public final ShapeFilterCallback T_03 = ShapeFilterCallback.native_new();

    /*[-JNI;-NATIVE]
class ShapeFilterCallbackImpl : public ShapeFilterCallback {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID ShouldCollide_AnyJJ_ID = 0;
	inline static jmethodID ShouldCollide_ShapeJJJJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(ShapeFilterCallbackImpl::jClassID == 0) {
		ShapeFilterCallbackImpl::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		ShapeFilterCallbackImpl::ShouldCollide_AnyJJ_ID = env->GetMethodID(jClassID, "internal_ShouldCollide_Any", "(JJ)Z");
		ShapeFilterCallbackImpl::ShouldCollide_ShapeJJJJ_ID = env->GetMethodID(jClassID, "internal_ShouldCollide_Shape", "(JJJJ)Z");
	}
}
virtual bool ShouldCollide_Any(const Shape* inShape2, const SubShapeID& inSubShapeIDOfShape2) const {
   return env->CallBooleanMethod(obj, ShapeFilterCallbackImpl::ShouldCollide_AnyJJ_ID, (jlong)inShape2, (jlong)&inSubShapeIDOfShape2);
}
virtual bool ShouldCollide_Shape(const Shape* inShape1, const SubShapeID& inSubShapeIDOfShape1, const Shape* inShape2, const SubShapeID& inSubShapeIDOfShape2) const {
   return env->CallBooleanMethod(obj, ShapeFilterCallbackImpl::ShouldCollide_ShapeJJJJ_ID, (jlong)inShape1, (jlong)&inSubShapeIDOfShape1, (jlong)inShape2, (jlong)&inSubShapeIDOfShape2);
}
};
*/
    @Deprecated()
    protected ShapeFilterCallback(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static ShapeFilterCallback native_new() {
        return new ShapeFilterCallback((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
ShapeFilterCallbackImpl* nativeObject = (ShapeFilterCallbackImpl*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public ShapeFilterCallback() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected boolean ShouldCollide_Any(Shape inShape2, SubShapeID inSubShapeIDOfShape2) {
        return false;
    }

    private boolean internal_ShouldCollide_Any(long inShape2_addr, long inSubShapeIDOfShape2_addr) {
        if (Shape_TEMP_STATIC_GEN_0 == null)
            Shape_TEMP_STATIC_GEN_0 = Shape.native_new();
        Shape_TEMP_STATIC_GEN_0.internal_reset(inShape2_addr, false);
        if (SubShapeID_TEMP_STATIC_GEN_0 == null)
            SubShapeID_TEMP_STATIC_GEN_0 = SubShapeID.native_new();
        SubShapeID_TEMP_STATIC_GEN_0.internal_reset(inSubShapeIDOfShape2_addr, false);
        return ShouldCollide_Any(Shape_TEMP_STATIC_GEN_0, SubShapeID_TEMP_STATIC_GEN_0);
    }

    protected boolean ShouldCollide_Shape(Shape inShape1, SubShapeID inSubShapeIDOfShape1, Shape inShape2, SubShapeID inSubShapeIDOfShape2) {
        return false;
    }

    private boolean internal_ShouldCollide_Shape(long inShape1_addr, long inSubShapeIDOfShape1_addr, long inShape2_addr, long inSubShapeIDOfShape2_addr) {
        if (Shape_TEMP_STATIC_GEN_1 == null)
            Shape_TEMP_STATIC_GEN_1 = Shape.native_new();
        Shape_TEMP_STATIC_GEN_1.internal_reset(inShape1_addr, false);
        if (SubShapeID_TEMP_STATIC_GEN_1 == null)
            SubShapeID_TEMP_STATIC_GEN_1 = SubShapeID.native_new();
        SubShapeID_TEMP_STATIC_GEN_1.internal_reset(inSubShapeIDOfShape1_addr, false);
        if (Shape_TEMP_STATIC_GEN_2 == null)
            Shape_TEMP_STATIC_GEN_2 = Shape.native_new();
        Shape_TEMP_STATIC_GEN_2.internal_reset(inShape2_addr, false);
        if (SubShapeID_TEMP_STATIC_GEN_2 == null)
            SubShapeID_TEMP_STATIC_GEN_2 = SubShapeID.native_new();
        SubShapeID_TEMP_STATIC_GEN_2.internal_reset(inSubShapeIDOfShape2_addr, false);
        return ShouldCollide_Shape(Shape_TEMP_STATIC_GEN_1, SubShapeID_TEMP_STATIC_GEN_1, Shape_TEMP_STATIC_GEN_2, SubShapeID_TEMP_STATIC_GEN_2);
    }

    /*[-JNI;-NATIVE]
return (jlong)new ShapeFilterCallbackImpl();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
ShapeFilterCallbackImpl* nativeObject = (ShapeFilterCallbackImpl*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
