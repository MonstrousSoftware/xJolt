/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.geometry;

import com.github.xpenatan.jParser.idl.IDLBase;
import jolt.math.Mat44;
import jolt.math.Vec3;

public class OrientedBox extends IDLBase {

    private Mat44 Mat44_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    static public final OrientedBox NULL = OrientedBox.native_new();

    public OrientedBox() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new OrientedBox();
*/
    public static native long internal_native_create();

    public OrientedBox(Mat44 inOrientation, Vec3 inHalfExtents) {
        long addr = internal_native_create_Mat44_Vec3(inOrientation.native_address, inHalfExtents.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new OrientedBox(*((Mat44* )inOrientation_addr), *((Vec3* )inHalfExtents_addr));
*/
    public static native long internal_native_create_Mat44_Vec3(long inOrientation_addr, long inHalfExtents_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected OrientedBox(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static OrientedBox native_new() {
        return new OrientedBox((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
OrientedBox* nativeObject = (OrientedBox*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public Mat44 get_mOrientation() {
        long pointer = internal_native_get_mOrientation(native_address);
        if (pointer == 0)
            return Mat44.NULL;
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = Mat44.native_new();
        Mat44_TEMP_GEN_0.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
OrientedBox* nativeObject = (OrientedBox*)this_addr;
return (jlong)&nativeObject->mOrientation;
*/
    public static native long internal_native_get_mOrientation(long this_addr);

    public void set_mOrientation(Mat44 mOrientation) {
        internal_native_set_mOrientation(native_address, mOrientation.native_address);
    }

    /*[-JNI;-NATIVE]
OrientedBox* nativeObject = (OrientedBox*)this_addr;
nativeObject->mOrientation = *((Mat44*)mOrientation_addr);
*/
    public static native void internal_native_set_mOrientation(long this_addr, long mOrientation_addr);

    public Vec3 get_mHalfExtents() {
        long pointer = internal_native_get_mHalfExtents(native_address);
        if (pointer == 0)
            return Vec3.NULL;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = Vec3.native_new();
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
OrientedBox* nativeObject = (OrientedBox*)this_addr;
return (jlong)&nativeObject->mHalfExtents;
*/
    public static native long internal_native_get_mHalfExtents(long this_addr);

    public void set_mHalfExtents(Vec3 mHalfExtents) {
        internal_native_set_mHalfExtents(native_address, mHalfExtents.native_address);
    }

    /*[-JNI;-NATIVE]
OrientedBox* nativeObject = (OrientedBox*)this_addr;
nativeObject->mHalfExtents = *((Vec3*)mHalfExtents_addr);
*/
    public static native void internal_native_set_mHalfExtents(long this_addr, long mHalfExtents_addr);
}
