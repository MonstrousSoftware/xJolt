/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.geometry;

import com.github.xpenatan.jParser.idl.IDLBase;

public class TriangleList extends IDLBase {

    private Triangle Triangle_TEMP_GEN_0;

    static public final TriangleList NULL = TriangleList.native_new();

    public TriangleList() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new TriangleList();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected TriangleList(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static TriangleList native_new() {
        return new TriangleList((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
TriangleList* nativeObject = (TriangleList*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean empty() {
        return internal_native_empty(native_address);
    }

    /*[-JNI;-NATIVE]
TriangleList* nativeObject = (TriangleList*)this_addr;
return nativeObject->empty();
*/
    public static native boolean internal_native_empty(long this_addr);

    public int size() {
        return internal_native_size(native_address);
    }

    /*[-JNI;-NATIVE]
TriangleList* nativeObject = (TriangleList*)this_addr;
return nativeObject->size();
*/
    public static native int internal_native_size(long this_addr);

    public Triangle at(int inIndex) {
        long pointer = internal_native_at(native_address, inIndex);
        if (pointer == 0)
            return Triangle.NULL;
        if (Triangle_TEMP_GEN_0 == null)
            Triangle_TEMP_GEN_0 = Triangle.native_new();
        Triangle_TEMP_GEN_0.internal_reset(pointer, false);
        return Triangle_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TriangleList* nativeObject = (TriangleList*)this_addr;
return (jlong)&nativeObject->at((int)inIndex);
*/
    public static native long internal_native_at(long this_addr, int inIndex);

    public void push_back(Triangle inTriangle) {
        internal_native_push_back(native_address, inTriangle.native_address);
    }

    /*[-JNI;-NATIVE]
TriangleList* nativeObject = (TriangleList*)this_addr;
nativeObject->push_back(*((Triangle* )inTriangle_addr));
*/
    public static native void internal_native_push_back(long this_addr, long inTriangle_addr);

    public void reserve(int inSize) {
        internal_native_reserve(native_address, inSize);
    }

    /*[-JNI;-NATIVE]
TriangleList* nativeObject = (TriangleList*)this_addr;
nativeObject->reserve(inSize);
*/
    public static native void internal_native_reserve(long this_addr, int inSize);

    public void resize(int inSize) {
        internal_native_resize(native_address, inSize);
    }

    /*[-JNI;-NATIVE]
TriangleList* nativeObject = (TriangleList*)this_addr;
nativeObject->resize(inSize);
*/
    public static native void internal_native_resize(long this_addr, int inSize);

    public void clear() {
        internal_native_clear(native_address);
    }

    /*[-JNI;-NATIVE]
TriangleList* nativeObject = (TriangleList*)this_addr;
nativeObject->clear();
*/
    public static native void internal_native_clear(long this_addr);
}
