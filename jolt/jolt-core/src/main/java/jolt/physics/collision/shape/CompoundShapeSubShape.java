/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision.shape;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.math.Quat;

public class CompoundShapeSubShape extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    static public final CompoundShapeSubShape NULL = CompoundShapeSubShape.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected CompoundShapeSubShape(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static CompoundShapeSubShape native_new() {
        return new CompoundShapeSubShape((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
CompoundShapeSubShape* nativeObject = (CompoundShapeSubShape*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public Vec3 GetPositionCOM() {
        long pointer = internal_native_GetPositionCOM(native_address);
        if (pointer == 0)
            return Vec3.NULL;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = Vec3.native_new();
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CompoundShapeSubShape* nativeObject = (CompoundShapeSubShape*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetPositionCOM();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetPositionCOM(long this_addr);

    public Quat GetRotation() {
        long pointer = internal_native_GetRotation(native_address);
        if (pointer == 0)
            return Quat.NULL;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = Quat.native_new();
        Quat_TEMP_GEN_0.internal_reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CompoundShapeSubShape* nativeObject = (CompoundShapeSubShape*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetRotation();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetRotation(long this_addr);

    public Shape get_mShape() {
        long pointer = internal_native_get_mShape(native_address);
        if (pointer == 0)
            return Shape.NULL;
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = Shape.native_new();
        Shape_TEMP_GEN_0.internal_reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CompoundShapeSubShape* nativeObject = (CompoundShapeSubShape*)this_addr;
const Shape* attr = nativeObject->mShape;
return (jlong)attr;
*/
    public static native long internal_native_get_mShape(long this_addr);

    public void set_mShape(Shape mShape) {
        internal_native_set_mShape(native_address, mShape.native_address);
    }

    /*[-JNI;-NATIVE]
CompoundShapeSubShape* nativeObject = (CompoundShapeSubShape*)this_addr;
nativeObject->mShape = (Shape*)mShape_addr;
*/
    public static native void internal_native_set_mShape(long this_addr, long mShape_addr);

    public int get_mUserData() {
        return internal_native_get_mUserData(native_address);
    }

    /*[-JNI;-NATIVE]
CompoundShapeSubShape* nativeObject = (CompoundShapeSubShape*)this_addr;
return nativeObject->mUserData;
*/
    public static native int internal_native_get_mUserData(long this_addr);

    public void set_mUserData(int mUserData) {
        internal_native_set_mUserData(native_address, mUserData);
    }

    /*[-JNI;-NATIVE]
CompoundShapeSubShape* nativeObject = (CompoundShapeSubShape*)this_addr;
nativeObject->mUserData = mUserData;
*/
    public static native void internal_native_set_mUserData(long this_addr, int mUserData);
}
