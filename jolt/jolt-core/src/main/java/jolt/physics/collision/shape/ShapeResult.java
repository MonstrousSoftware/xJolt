/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision.shape;

import com.github.xpenatan.jParser.idl.IDLBase;
import jolt.idl.helper.IDLString;

public class ShapeResult extends IDLBase {

    private IDLString IDLString_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    static public final ShapeResult NULL = ShapeResult.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected ShapeResult(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static ShapeResult native_new() {
        return new ShapeResult((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean IsValid() {
        return internal_native_IsValid(native_address);
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
return nativeObject->IsValid();
*/
    public static native boolean internal_native_IsValid(long this_addr);

    public boolean HasError() {
        return internal_native_HasError(native_address);
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
return nativeObject->HasError();
*/
    public static native boolean internal_native_HasError(long this_addr);

    public IDLString GetError() {
        long pointer = internal_native_GetError(native_address);
        if (pointer == 0)
            return IDLString.NULL;
        if (IDLString_TEMP_GEN_0 == null)
            IDLString_TEMP_GEN_0 = IDLString.native_new();
        IDLString_TEMP_GEN_0.internal_reset(pointer, false);
        return IDLString_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
return (jlong)&nativeObject->GetError();
*/
    public static native long internal_native_GetError(long this_addr);

    public Shape Get() {
        long pointer = internal_native_Get(native_address);
        if (pointer == 0)
            return Shape.NULL;
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = Shape.native_new();
        Shape_TEMP_GEN_0.internal_reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
Shape* obj = nativeObject->Get();
return (jlong)obj;
*/
    public static native long internal_native_Get(long this_addr);

    public void Clear() {
        internal_native_Clear(native_address);
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
nativeObject->Clear();
*/
    public static native void internal_native_Clear(long this_addr);
}
