/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision.shape;

import com.github.xpenatan.jParser.idl.IDLBase;
import jolt.physics.body.BodyID;

public class SubShapeIDPair extends IDLBase {

    private BodyID BodyID_TEMP_GEN_0;

    private SubShapeID SubShapeID_TEMP_GEN_0;

    private BodyID BodyID_TEMP_GEN_1;

    private SubShapeID SubShapeID_TEMP_GEN_1;

    static public final SubShapeIDPair NULL = SubShapeIDPair.native_new();

    public SubShapeIDPair() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new SubShapeIDPair();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected SubShapeIDPair(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static SubShapeIDPair native_new() {
        return new SubShapeIDPair((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
SubShapeIDPair* nativeObject = (SubShapeIDPair*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public BodyID GetBody1ID() {
        long pointer = internal_native_GetBody1ID(native_address);
        if (pointer == 0)
            return BodyID.NULL;
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = BodyID.native_new();
        BodyID_TEMP_GEN_0.internal_reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SubShapeIDPair* nativeObject = (SubShapeIDPair*)this_addr;
return (jlong)&nativeObject->GetBody1ID();
*/
    public static native long internal_native_GetBody1ID(long this_addr);

    public SubShapeID GetSubShapeID1() {
        long pointer = internal_native_GetSubShapeID1(native_address);
        if (pointer == 0)
            return SubShapeID.NULL;
        if (SubShapeID_TEMP_GEN_0 == null)
            SubShapeID_TEMP_GEN_0 = SubShapeID.native_new();
        SubShapeID_TEMP_GEN_0.internal_reset(pointer, false);
        return SubShapeID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SubShapeIDPair* nativeObject = (SubShapeIDPair*)this_addr;
return (jlong)&nativeObject->GetSubShapeID1();
*/
    public static native long internal_native_GetSubShapeID1(long this_addr);

    public BodyID GetBody2ID() {
        long pointer = internal_native_GetBody2ID(native_address);
        if (pointer == 0)
            return BodyID.NULL;
        if (BodyID_TEMP_GEN_1 == null)
            BodyID_TEMP_GEN_1 = BodyID.native_new();
        BodyID_TEMP_GEN_1.internal_reset(pointer, false);
        return BodyID_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SubShapeIDPair* nativeObject = (SubShapeIDPair*)this_addr;
return (jlong)&nativeObject->GetBody2ID();
*/
    public static native long internal_native_GetBody2ID(long this_addr);

    public SubShapeID GetSubShapeID2() {
        long pointer = internal_native_GetSubShapeID2(native_address);
        if (pointer == 0)
            return SubShapeID.NULL;
        if (SubShapeID_TEMP_GEN_1 == null)
            SubShapeID_TEMP_GEN_1 = SubShapeID.native_new();
        SubShapeID_TEMP_GEN_1.internal_reset(pointer, false);
        return SubShapeID_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SubShapeIDPair* nativeObject = (SubShapeIDPair*)this_addr;
return (jlong)&nativeObject->GetSubShapeID2();
*/
    public static native long internal_native_GetSubShapeID2(long this_addr);
}
