/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.physics.collision.shape.Shape;
import jolt.physics.collision.shape.SubShapeID;

public class SoftBodyShape extends Shape {

    static public final SoftBodyShape NULL = SoftBodyShape.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected SoftBodyShape(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static SoftBodyShape native_new() {
        return new SoftBodyShape((byte) 0, (char) 0);
    }

    public int GetSubShapeIDBits() {
        return internal_native_GetSubShapeIDBits(native_address);
    }

    /*[-JNI;-NATIVE]
SoftBodyShape* nativeObject = (SoftBodyShape*)this_addr;
return nativeObject->GetSubShapeIDBits();
*/
    public static native int internal_native_GetSubShapeIDBits(long this_addr);

    public int GetFaceIndex(SubShapeID inSubShapeID) {
        return internal_native_GetFaceIndex(native_address, inSubShapeID.native_address);
    }

    /*[-JNI;-NATIVE]
SoftBodyShape* nativeObject = (SoftBodyShape*)this_addr;
return nativeObject->GetFaceIndex(*((SubShapeID* )inSubShapeID_addr));
*/
    public static native int internal_native_GetFaceIndex(long this_addr, long inSubShapeID_addr);
}
