interface RVec3 {
    void RVec3();
    void RVec3(double inX, double inY, double inZ);
    [Value] static RVec3 sZero();
    [Value] static RVec3 sOne();
    [Value] static RVec3 sAxisX();
    [Value] static RVec3 sAxisY();
    [Value] static RVec3 sAxisZ();
    [Value] static RVec3 sReplicate(double inValue);
    [Value] static RVec3 sMin([Const, Ref] RVec3 inLHS, [Const, Ref] RVec3 inRHS);
    [Value] static RVec3 sMax([Const, Ref] RVec3 inLHS, [Const, Ref] RVec3 inRHS);
    [Value] static RVec3 sClamp([Const, Ref] RVec3 inValue, [Const, Ref] RVec3 inMin, [Const, Ref] RVec3 inMax);
    [Operator="[]"] double GetComponent(unsigned long inCoordinate);
    [Operator="=="] boolean Equals([Const, Ref] RVec3 inV);
    [Operator="!="] boolean NotEquals([Const, Ref] RVec3 inV);
    double LengthSq();
    double Length();
    [Value] RVec3 Normalized();
    double GetX();
    double GetY();
    double GetZ();
    void SetX(double inX);
    void SetY(double inY);
    void SetZ(double inZ);
    void Set(double inX, double inY, double inZ);
    void SetComponent(unsigned long inCoordinate, double inValue);
    boolean IsNearZero(optional double inMaxDistSq);
    boolean IsClose([Const, Ref] RVec3 inV, optional double inMaxDistSq);
    boolean IsNormalized(optional double inTolerance);
    [Const, Value] RVec3 Abs();
    [Const, Value] RVec3 Reciprocal();
    [Const, Value] RVec3 Cross([Const, Ref] RVec3 inRHS);
    double Dot([Const, Ref] RVec3 inRHS);
    [Operator="+=", Ref] RVec3 Add([Const, Ref] Vec3 inV);
    [Operator="-=", Ref] RVec3 Sub([Const, Ref] Vec3 inV);
    [Operator="*=", Ref] RVec3 Mul(double inV);
    [Operator="/=", Ref] RVec3 Div(double inV);
    [Operator = "*", Value] RVec3 MulRVec3([Const, Ref] RVec3 inV);
    [Operator = "*", Value] RVec3 MulFloat(float inV);
    [Operator = "/", Value] RVec3 DivRVec3([Const, Ref] RVec3 inV);
    [Operator = "/", Value] RVec3 DivFloat(float inV);
    [Operator = "+", Value] RVec3 AddRVec3([Const, Ref] RVec3 inV);
    [Operator = "-", Value] RVec3 SubRVec3([Const, Ref] RVec3 inV);
    [Const, Value] RVec3 Sqrt();
    [Const, Value] RVec3 GetSign();
};

interface RMat44 {
    void RMat44();
    [Value] static RMat44 sZero();
    [Value] static RMat44 sIdentity();
    [Value] static RMat44 sRotation([Const, Ref] Quat inQ);
    [Value] static RMat44 sTranslation([Const, Ref] RVec3 inTranslation);
    [Value] static RMat44 sRotationTranslation([Const, Ref] Quat inRotation, [Const, Ref] RVec3 inTranslation);
    [Value] static RMat44 sInverseRotationTranslation([Const, Ref] Quat inRotation, [Const, Ref] RVec3 inTranslation);
    [Value] Mat44 ToMat44();
    [Operator="=="] boolean Equals([Const, Ref] RMat44 inV);
    [Operator="!="] boolean NotEquals([Const, Ref] RMat44 inV);
    [Operator="*", Value] RVec3 MulVec3([Const, Ref] Vec3 inV);
    [Operator="*", Value] RVec3 MulRVec3([Const, Ref] RVec3 inV);
    [Operator="*", Value] RMat44 MulMat44([Const, Ref] Mat44 inM);
    [Operator="*", Value] RMat44 MulRMat44([Const, Ref] RMat44 inM);
    [Value] Vec3 GetAxisX();
    [Value] Vec3 GetAxisY();
    [Value] Vec3 GetAxisZ();
    [Value] Mat44 GetRotation();
    void SetRotation([Const, Ref] Mat44 inRotation);
    [Value] Quat GetQuaternion();
    [Value] RVec3 GetTranslation();
    boolean IsClose([Const, Ref] RMat44 inM, optional double inMaxDistSq);
    [Value] Vec3 Multiply3x3([Const, Ref] Vec3 inV);
    [Value] Vec3 Multiply3x3Transposed([Const, Ref] Vec3 inV);
    [Value] Mat44 Transposed3x3();
    [Value] RMat44 Inversed();
    [Value] RMat44 InversedRotationTranslation();
    [Value] RMat44 PreTranslated([Const, Ref] Vec3 inTranslation);
    [Value] RMat44 PostTranslated([Const, Ref] Vec3 inTranslation);
    [Value] RMat44 PreScaled([Const, Ref] Vec3 inScale);
    [Value] RMat44 PostScaled([Const, Ref] Vec3 inScale);
    [Value] Mat44 GetDirectionPreservingMatrix();
    void SetColumn3(long inCol, [Const, Ref] Vec3 inV);
    [Value] Vec3 GetColumn3(long inCol);
    void SetAxisX([Const, Ref] Vec3 inV);
    void SetAxisY([Const, Ref] Vec3 inV);
    void SetAxisZ([Const, Ref] Vec3 inV);
    void SetTranslation([Const, Ref] RVec3 inV);
    void SetColumn4(long inCol, [Const, Ref] Vec4 inV);
    [Value] Vec4 GetColumn4(long inCol);
    [Value] RMat44 Decompose([Ref] Vec3 outScale);
};